import React, { useEffect, useState } from 'react';
import { Alert } from 'react-bootstrap';
import Smooch from 'smooch';
import UltimateChat from 'https://widget.ultimate.ai/sdk/index.mjs';

const MainPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [isFormValid, setIsFormValid] = useState(false);
    const [locale, setLocale] = useState(null);
    const [showMessagingWidgetConversationField, setShowMessagingWidgetConversationalField] = useState(false);
    const [messagingWidgetConversationFields, setMessagingWidgetConversationalField] = useState('');
    const [suncoTokenExists, setSuncoTokenExists] = useState(false);
    const [messageToken, setMessageToken] = useState('');

    const handleMessagingWidgetAction = (action) => {
        window.zE('messenger', action);
    };

    const handleMessagingWidgetLogout = () => {
        window.zE('messenger', 'logoutUser');
        sessionStorage.removeItem('messageToken');
        setMessageToken('');
    };

    const handleMessagingWidgetLocale = (locale) => {
        window.zE('messenger:set', 'locale', locale);
    };

    const handleMessagingWidgetConversationalFields = () => {
        window.zE('messenger:set', 'conversationFields', [
            { id: '32542768289945', value: 'This is a set conversation field test' }
        ]);
        setShowMessagingWidgetConversationalField(true);
        setMessagingWidgetConversationalField(`window.zE('messenger:set', 'conversationFields', [{ id: '32542768289945', value: 'This is a set conversation field test' }])`);
    };

    const handleLocaleChange = (event) => {
        setLocale(event.target.value);
        handleMessagingWidgetLocale(event.target.value);
    };

    const handleSuncoWidgetAction = (action) => {
        if (action === "open") Smooch.open();
        if (action === "close") Smooch.close();
    };

    const handleSuncoWidgetLogout = () => {
        Smooch.logout();
        sessionStorage.removeItem('suncoToken');
        setSuncoTokenExists(false);
    };

    const handleClearBrowserStorage = () => {
        window.zE('messenger', 'logoutUser');
        localStorage.clear();
        sessionStorage.clear();
        setMessageToken('');
        setSuncoTokenExists(false);
        window.location.reload();
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        if (name === 'email') setEmail(value);
        if (name === 'password') setPassword(value);

        const isValid = value.trim() !== '' && (name === 'email' ? password.trim() : email.trim()) !== '';
        setIsFormValid(isValid);
    };

    const handleLogin = async (e) => {
        e.preventDefault();

        try {
            const response = await fetch('http://localhost:3001/auth', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            sessionStorage.setItem('messageToken', data.messageToken);
            sessionStorage.setItem('suncoToken', data.suncoToken);
            sessionStorage.setItem('email', email);
            sessionStorage.setItem('password', password);

            setSuncoTokenExists(!!data.suncoToken);
            setMessageToken(data.messageToken);

            window.location.href = '/';
        } catch (error) {
            console.log(error);
        }
    };

    const handleAccessGuide = async () => {
        const messageToken = sessionStorage.getItem('messageToken');

        try {
            const response = await fetch(`http://localhost:3001/auth/jwtsso?return_to=https://z3ntscap.tstechlab.com/hc/en-us`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ messageToken })
            });

            if (response.ok) {
                const data = await response.json();
                window.location.href = data.redirectURL;
            } else {
                console.error('Failed to get redirect URL');
            }
        } catch (error) {
            console.error(error);
        }
    };

    const fetchJWTToken = async () => {
        const email = sessionStorage.getItem('email');
        const password = sessionStorage.getItem('password');

        const response = await fetch('http://localhost:3001/auth', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });

        return response.json();
    };

    useEffect(() => {
        // Inject scripts and styles
        const jqueryScript = document.createElement('script');
        jqueryScript.src = 'https://code.jquery.com/jquery-3.3.1.js';
        jqueryScript.integrity = 'sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=';
        jqueryScript.crossOrigin = 'anonymous';
        document.body.appendChild(jqueryScript);

        const bootstrapLink = document.createElement('link');
        bootstrapLink.rel = 'stylesheet';
        bootstrapLink.href = 'https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css';
        document.head.appendChild(bootstrapLink);

        const biLink = document.createElement('link');
        biLink.rel = 'stylesheet';
        biLink.href = 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css';
        document.head.appendChild(biLink);

        const script = document.createElement('script');
        script.type = 'module';
        script.src = 'https://widget.ultimate.ai/sdk/index.mjs';
        script.onload = () => {
            UltimateChat.Initialize({
                botId: '6773849286d15fab7828f2c2',
                theme: {
                    'actions': '#4C67D3',
                    'actions-hover': '#1833AB',
                    'header-text': '#FFFFFF',
                    'chat-button': '#151A1E',
                    'header': '#063940',
                    'chat-border-radius': '12px'
                },
                navbar: {
                    avatarUrl: 'https://www.ultimate.ai/hubfs/raw_assets/public/ultimate/favicon/apple-touch-icon-152x152.png',
                    title: 'AI agents (Ultimate)'
                },
                recoverConversation: true,
                messageGeneratedAdditionalInfo: false,
                showLlmSources: true,
                showAIAnswerLabel: true,
                allowSoundNotifications: true,
                chatPosition: 'bottom-right'
            });
        };
        document.body.appendChild(script);

        const zendeskScript = document.createElement('script');
        zendeskScript.id = 'ze-snippet';
        zendeskScript.src = 'https://static.zdassets.com/ekr/snippet.js?key=6b8220bb-b66e-4385-bff3-c4185d610542';
        //5e37d168-0b7b-422e-a2c2-0cbe5628d522 erulearning
        document.body.appendChild(zendeskScript);

        setTimeout(() => {
            const storedMessageToken = sessionStorage.getItem('messageToken');
            const storedSuncoToken = sessionStorage.getItem('suncoToken');

            setMessageToken(storedMessageToken || '');
            setSuncoTokenExists(!!storedSuncoToken);

            window.zE('messenger', 'loginUser', async function jwtCallback(callback) {
                fetchJWTToken()
                    .then(data => {
                        setMessageToken(data.messageToken);
                        callback(data.messageToken);
                    })
                    .catch(error => console.log("Error: " + error));
            });

            window.zE('messenger:set', 'conversationTags', []);
            window.zE('messenger:set', 'conversationFields', []);
        }, 1000);
    }, []);

    return (
        <>
            <header className='header'><h1>Dashboard</h1></header>
            <div className='container'>
                <h2 className='title'>Login</h2>
                <form onSubmit={handleLogin}>
                    <input type='text' name='email' placeholder='Username' value={email} onChange={handleInputChange} className='input-field' />
                    <input type='password' name='password' placeholder='Password' value={password} onChange={handleInputChange} className='input-field' />
                    <button type='submit' disabled={!isFormValid} className='primarybutton'>
                        {isFormValid ? 'Login' : 'Please fill in credentials to login'}
                    </button>
                </form>

                {!!messageToken && (
                    <Alert variant="info" style={{ wordBreak: 'break-word', whiteSpace: 'pre-wrap', marginTop: '10px', position: 'relative', paddingRight: '40px' }}>
                        <strong>Message Token:</strong><br />
                        <span id="messageTokenText">{messageToken}</span>
                        <i className="bi bi-clipboard" title="Copy to clipboard"
                            style={{
                                cursor: 'pointer',
                                color: '#22616e',
                                position: 'absolute',
                                top: '10px',
                                right: '10px',
                                fontSize: '1.2rem',
                            }}></i>
                    </Alert>
                )}
            </div>

            <div className='container'>
                <h2 className='title'>Zendesk Web Widget</h2>
                <div className='group'>
                    <button className='primarybutton' onClick={() => handleMessagingWidgetAction('open')}>Open</button>
                    <button className='primarybutton' onClick={() => handleMessagingWidgetAction('close')}>Close</button>
                    <button className='primarybutton' onClick={() => handleMessagingWidgetAction('show')}>Show</button>
                    <button className='primarybutton' onClick={() => handleMessagingWidgetAction('hide')}>Hide</button>
                    <button className='secondarybutton' onClick={handleMessagingWidgetLogout}>Logout</button>
                </div>
                <div className='group'>
                    <button className='primarybutton' onClick={() => handleMessagingWidgetLocale(locale)}>Set Locale</button>
                    <select className='dropdown rounded-dropdown' value={locale} onChange={handleLocaleChange}>
                        <option value="en-US">en-US</option>
                        <option value="fr">fr</option>
                        <option value="ko">ko</option>
                        <option value="de">de</option>
                        <option value="es">es</option>
                        <option value="vi">vi</option>
                    </select>
                </div>
                <div className='group'>
                    <button className='primarybutton' onClick={handleMessagingWidgetConversationalFields}>Set Conversational Fields</button>
                </div>
                <div className='group'>
                    <label>{showMessagingWidgetConversationField && messagingWidgetConversationFields}</label>
                </div>
            </div>

            <div className='container'>
                <h2 className='title'>SSO to Guide</h2>
                <div className='button-group'>
                    <button className='primarybutton' onClick={handleAccessGuide}>Access Guide</button>
                </div>
            </div>

            <div className='container'>
                <h2 className='title'>Utilities</h2>
                <div className='button-group'>
                    <button className='primarybutton' onClick={handleClearBrowserStorage}>Clear Browser Storage</button>
                </div>
            </div>
        </>
    );
};

export default MainPage;
